using SharpDX;
using System.Collections.Concurrent;
using System;
using System.Globalization;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.IO;

public sealed class FastOBJWriter : IDisposable
{
    private readonly ProducerConsumerFileWriter _writer;
    private readonly CultureInfo _ic = CultureInfo.InvariantCulture;
    private readonly BlockingCollection<string> _faceQueue;
    private readonly Task _faceWriterTask;
    private int _vertexIndex;

    public FastOBJWriter(string path)
    {
        _writer = new ProducerConsumerFileWriter(path);
        _faceQueue = new BlockingCollection<string>(Environment.ProcessorCount * 2);
        _faceWriterTask = Task.Run(FaceWriterLoop);
        var header = new StringBuilder();
        header.AppendLine("# OBJ generated by VoxelMeshExporter");
        header.AppendLine("mtllib material.mtl");
        header.AppendLine($"o {Path.GetFileNameWithoutExtension(path)}");
        header.AppendLine("g default");
        header.AppendLine("usemtl default");
        _writer.EnqueueWrite(Encoding.ASCII.GetBytes(header.ToString()), header.Length);
    }

    private async Task FaceWriterLoop()
    {
        foreach (var faceBatch in _faceQueue.GetConsumingEnumerable())
        {
            var bytes = Encoding.ASCII.GetBytes(faceBatch);
            _writer.EnqueueWrite(bytes, bytes.Length);
        }
        await Task.CompletedTask;
    }

    public int WriteVertex(Vector3 v)
    {
        var line = $"v {v.X.ToString("F6", _ic)} {v.Y.ToString("F6", _ic)} {v.Z.ToString("F6", _ic)}\n";
        var bytes = Encoding.ASCII.GetBytes(line);
        _writer.EnqueueWrite(bytes, bytes.Length);
        return Interlocked.Increment(ref _vertexIndex);
    }

    public void QueueFaces(StringBuilder faceBuffer)
    {
        _faceQueue.Add(faceBuffer.ToString());
    }

    public void Dispose()
    {
        _faceQueue.CompleteAdding();
        _faceWriterTask.Wait();
        _writer.Dispose();
        _faceQueue.Dispose();
    }
}
