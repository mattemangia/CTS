//Copyright 2025 Matteo Mangiagalli - matteo.mangiagalli@unifr.ch
using SharpDX;
using System.IO;
using System;
using System.Text;
using CTS.SharpDXIntegration;

public sealed class FastSTLWriter : IDisposable
{
    private readonly ProducerConsumerFileWriter _writer;
    private readonly string _path;
    private readonly byte[] _hdr = new byte[80];
    private readonly byte[] _countBuffer = new byte[4];
    private readonly byte[] _triangleBuffer = new byte[50];
    private readonly byte[] _chunkBuffer;
    private int _bufferPos, _triCount;
    private readonly object _encodeLock = new object();

    public FastSTLWriter(string path)
    {
        _path = path;
        _writer = new ProducerConsumerFileWriter(path);
        Encoding.ASCII.GetBytes("Binary STL generated by VoxelMeshExporter").CopyTo(_hdr, 0);
        // Write header and placeholder count synchronously
        _writer.EnqueueWrite(_hdr, 80);
        _writer.EnqueueWrite(new byte[4], 4);
        _chunkBuffer = new byte[1 << 18];
        _bufferPos = 0;
        _triCount = 0;
    }

    private unsafe void EncodeTriangle(Vector3 n, Vector3 v1, Vector3 v2, Vector3 v3)
    {
        fixed (byte* raw = &_triangleBuffer[0])
        {
            float* f = (float*)raw;
            n = Vector3.Normalize(n);
            f[0] = n.X; f[1] = n.Y; f[2] = n.Z;
            f[3] = v1.X; f[4] = v1.Y; f[5] = v1.Z;
            f[6] = v2.X; f[7] = v2.Y; f[8] = v2.Z;
            f[9] = v3.X; f[10] = v3.Y; f[11] = v3.Z;
            *((ushort*)(raw + 48)) = 0;
        }
    }

    public void WriteTriangle(Vector3 n, Vector3 v1, Vector3 v2, Vector3 v3)
    {
        lock (_encodeLock)
        {
            EncodeTriangle(n, v1, v2, v3);
            if (_bufferPos + 50 > _chunkBuffer.Length)
            {
                _writer.EnqueueWrite(_chunkBuffer, _bufferPos);
                _bufferPos = 0;
            }
            Buffer.BlockCopy(_triangleBuffer, 0, _chunkBuffer, _bufferPos, 50);
            _bufferPos += 50;
            _triCount++;
        }
    }

    public void WriteTriangles(TriangleWithVertices[] triangles)
    {
        foreach (var tri in triangles)
        {
            WriteTriangle(tri.Normal, tri.Vertices[0], tri.Vertices[1], tri.Vertices[2]);
        }
    }

    public int TriangleCount => _triCount;

    public void Dispose()
    {
        lock (_encodeLock)
        {
            if (_bufferPos > 0)
                _writer.EnqueueWrite(_chunkBuffer, _bufferPos);
        }
        _writer.Dispose();
        // patch triangle count at offset 80
        using (var fs = new FileStream(_path, FileMode.Open, FileAccess.Write, FileShare.None))
        {
            fs.Seek(80, SeekOrigin.Begin);
            fs.Write(BitConverter.GetBytes(_triCount), 0, 4);
        }
    }
}